/*
 * This file is generated by jOOQ.
 */
package io.github.jklingsporn.qjre.schema.tables.records;


import io.github.jklingsporn.qjre.schema.tables.Store;
import io.github.jklingsporn.qjre.schema.tables.interfaces.IStore;
import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoreRecord extends UpdatableRecordImpl<StoreRecord> implements VertxPojo, Record4<Boolean, Boolean, Short, LocalDateTime>, IStore {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>sakila.store.store_id</code>.
     */
    @Override
    public StoreRecord setStoreId(Boolean value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>sakila.store.store_id</code>.
     */
    @Override
    public Boolean getStoreId() {
        return (Boolean) get(0);
    }

    /**
     * Setter for <code>sakila.store.manager_staff_id</code>.
     */
    @Override
    public StoreRecord setManagerStaffId(Boolean value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>sakila.store.manager_staff_id</code>.
     */
    @Override
    public Boolean getManagerStaffId() {
        return (Boolean) get(1);
    }

    /**
     * Setter for <code>sakila.store.address_id</code>.
     */
    @Override
    public StoreRecord setAddressId(Short value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>sakila.store.address_id</code>.
     */
    @Override
    public Short getAddressId() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>sakila.store.last_update</code>.
     */
    @Override
    public StoreRecord setLastUpdate(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>sakila.store.last_update</code>.
     */
    @Override
    public LocalDateTime getLastUpdate() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Boolean> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Boolean, Boolean, Short, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Boolean, Boolean, Short, LocalDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Boolean> field1() {
        return Store.STORE.STORE_ID;
    }

    @Override
    public Field<Boolean> field2() {
        return Store.STORE.MANAGER_STAFF_ID;
    }

    @Override
    public Field<Short> field3() {
        return Store.STORE.ADDRESS_ID;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Store.STORE.LAST_UPDATE;
    }

    @Override
    public Boolean component1() {
        return getStoreId();
    }

    @Override
    public Boolean component2() {
        return getManagerStaffId();
    }

    @Override
    public Short component3() {
        return getAddressId();
    }

    @Override
    public LocalDateTime component4() {
        return getLastUpdate();
    }

    @Override
    public Boolean value1() {
        return getStoreId();
    }

    @Override
    public Boolean value2() {
        return getManagerStaffId();
    }

    @Override
    public Short value3() {
        return getAddressId();
    }

    @Override
    public LocalDateTime value4() {
        return getLastUpdate();
    }

    @Override
    public StoreRecord value1(Boolean value) {
        setStoreId(value);
        return this;
    }

    @Override
    public StoreRecord value2(Boolean value) {
        setManagerStaffId(value);
        return this;
    }

    @Override
    public StoreRecord value3(Short value) {
        setAddressId(value);
        return this;
    }

    @Override
    public StoreRecord value4(LocalDateTime value) {
        setLastUpdate(value);
        return this;
    }

    @Override
    public StoreRecord values(Boolean value1, Boolean value2, Short value3, LocalDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IStore from) {
        setStoreId(from.getStoreId());
        setManagerStaffId(from.getManagerStaffId());
        setAddressId(from.getAddressId());
        setLastUpdate(from.getLastUpdate());
    }

    @Override
    public <E extends IStore> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StoreRecord
     */
    public StoreRecord() {
        super(Store.STORE);
    }

    /**
     * Create a detached, initialised StoreRecord
     */
    public StoreRecord(Boolean storeId, Boolean managerStaffId, Short addressId, LocalDateTime lastUpdate) {
        super(Store.STORE);

        setStoreId(storeId);
        setManagerStaffId(managerStaffId);
        setAddressId(addressId);
        setLastUpdate(lastUpdate);
    }

    /**
     * Create a detached, initialised StoreRecord
     */
    public StoreRecord(io.github.jklingsporn.qjre.schema.tables.pojos.Store value) {
        super(Store.STORE);

        if (value != null) {
            setStoreId(value.getStoreId());
            setManagerStaffId(value.getManagerStaffId());
            setAddressId(value.getAddressId());
            setLastUpdate(value.getLastUpdate());
        }
    }

        public StoreRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
