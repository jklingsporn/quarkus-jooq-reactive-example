/*
 * This file is generated by jOOQ.
 */
package io.github.jklingsporn.qjre.schema.tables.records;


import io.github.jklingsporn.qjre.schema.tables.City;
import io.github.jklingsporn.qjre.schema.tables.interfaces.ICity;
import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CityRecord extends UpdatableRecordImpl<CityRecord> implements VertxPojo, Record4<Short, String, Short, LocalDateTime>, ICity {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>sakila.city.city_id</code>.
     */
    @Override
    public CityRecord setCityId(Short value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>sakila.city.city_id</code>.
     */
    @Override
    public Short getCityId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>sakila.city.city</code>.
     */
    @Override
    public CityRecord setCity(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>sakila.city.city</code>.
     */
    @Override
    public String getCity() {
        return (String) get(1);
    }

    /**
     * Setter for <code>sakila.city.country_id</code>.
     */
    @Override
    public CityRecord setCountryId(Short value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>sakila.city.country_id</code>.
     */
    @Override
    public Short getCountryId() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>sakila.city.last_update</code>.
     */
    @Override
    public CityRecord setLastUpdate(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>sakila.city.last_update</code>.
     */
    @Override
    public LocalDateTime getLastUpdate() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Short> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Short, String, Short, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Short, String, Short, LocalDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Short> field1() {
        return City.CITY.CITY_ID;
    }

    @Override
    public Field<String> field2() {
        return City.CITY.CITY_;
    }

    @Override
    public Field<Short> field3() {
        return City.CITY.COUNTRY_ID;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return City.CITY.LAST_UPDATE;
    }

    @Override
    public Short component1() {
        return getCityId();
    }

    @Override
    public String component2() {
        return getCity();
    }

    @Override
    public Short component3() {
        return getCountryId();
    }

    @Override
    public LocalDateTime component4() {
        return getLastUpdate();
    }

    @Override
    public Short value1() {
        return getCityId();
    }

    @Override
    public String value2() {
        return getCity();
    }

    @Override
    public Short value3() {
        return getCountryId();
    }

    @Override
    public LocalDateTime value4() {
        return getLastUpdate();
    }

    @Override
    public CityRecord value1(Short value) {
        setCityId(value);
        return this;
    }

    @Override
    public CityRecord value2(String value) {
        setCity(value);
        return this;
    }

    @Override
    public CityRecord value3(Short value) {
        setCountryId(value);
        return this;
    }

    @Override
    public CityRecord value4(LocalDateTime value) {
        setLastUpdate(value);
        return this;
    }

    @Override
    public CityRecord values(Short value1, String value2, Short value3, LocalDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ICity from) {
        setCityId(from.getCityId());
        setCity(from.getCity());
        setCountryId(from.getCountryId());
        setLastUpdate(from.getLastUpdate());
    }

    @Override
    public <E extends ICity> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CityRecord
     */
    public CityRecord() {
        super(City.CITY);
    }

    /**
     * Create a detached, initialised CityRecord
     */
    public CityRecord(Short cityId, String city, Short countryId, LocalDateTime lastUpdate) {
        super(City.CITY);

        setCityId(cityId);
        setCity(city);
        setCountryId(countryId);
        setLastUpdate(lastUpdate);
    }

    /**
     * Create a detached, initialised CityRecord
     */
    public CityRecord(io.github.jklingsporn.qjre.schema.tables.pojos.City value) {
        super(City.CITY);

        if (value != null) {
            setCityId(value.getCityId());
            setCity(value.getCity());
            setCountryId(value.getCountryId());
            setLastUpdate(value.getLastUpdate());
        }
    }

        public CityRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
