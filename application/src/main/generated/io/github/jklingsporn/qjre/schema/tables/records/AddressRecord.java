/*
 * This file is generated by jOOQ.
 */
package io.github.jklingsporn.qjre.schema.tables.records;


import io.github.jklingsporn.qjre.schema.tables.Address;
import io.github.jklingsporn.qjre.schema.tables.interfaces.IAddress;
import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Geometry;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AddressRecord extends UpdatableRecordImpl<AddressRecord> implements VertxPojo, Record9<Short, String, String, String, Short, String, String, Geometry, LocalDateTime>, IAddress {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>sakila.address.address_id</code>.
     */
    @Override
    public AddressRecord setAddressId(Short value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>sakila.address.address_id</code>.
     */
    @Override
    public Short getAddressId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>sakila.address.address</code>.
     */
    @Override
    public AddressRecord setAddress(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>sakila.address.address</code>.
     */
    @Override
    public String getAddress() {
        return (String) get(1);
    }

    /**
     * Setter for <code>sakila.address.address2</code>.
     */
    @Override
    public AddressRecord setAddress2(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>sakila.address.address2</code>.
     */
    @Override
    public String getAddress2() {
        return (String) get(2);
    }

    /**
     * Setter for <code>sakila.address.district</code>.
     */
    @Override
    public AddressRecord setDistrict(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>sakila.address.district</code>.
     */
    @Override
    public String getDistrict() {
        return (String) get(3);
    }

    /**
     * Setter for <code>sakila.address.city_id</code>.
     */
    @Override
    public AddressRecord setCityId(Short value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>sakila.address.city_id</code>.
     */
    @Override
    public Short getCityId() {
        return (Short) get(4);
    }

    /**
     * Setter for <code>sakila.address.postal_code</code>.
     */
    @Override
    public AddressRecord setPostalCode(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>sakila.address.postal_code</code>.
     */
    @Override
    public String getPostalCode() {
        return (String) get(5);
    }

    /**
     * Setter for <code>sakila.address.phone</code>.
     */
    @Override
    public AddressRecord setPhone(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>sakila.address.phone</code>.
     */
    @Override
    public String getPhone() {
        return (String) get(6);
    }

    /**
     * Setter for <code>sakila.address.location</code>.
     */
    @Override
    public AddressRecord setLocation(Geometry value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>sakila.address.location</code>.
     */
    @Override
    public Geometry getLocation() {
        return (Geometry) get(7);
    }

    /**
     * Setter for <code>sakila.address.last_update</code>.
     */
    @Override
    public AddressRecord setLastUpdate(LocalDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>sakila.address.last_update</code>.
     */
    @Override
    public LocalDateTime getLastUpdate() {
        return (LocalDateTime) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Short> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Short, String, String, String, Short, String, String, Geometry, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Short, String, String, String, Short, String, String, Geometry, LocalDateTime> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Short> field1() {
        return Address.ADDRESS.ADDRESS_ID;
    }

    @Override
    public Field<String> field2() {
        return Address.ADDRESS.ADDRESS_;
    }

    @Override
    public Field<String> field3() {
        return Address.ADDRESS.ADDRESS2;
    }

    @Override
    public Field<String> field4() {
        return Address.ADDRESS.DISTRICT;
    }

    @Override
    public Field<Short> field5() {
        return Address.ADDRESS.CITY_ID;
    }

    @Override
    public Field<String> field6() {
        return Address.ADDRESS.POSTAL_CODE;
    }

    @Override
    public Field<String> field7() {
        return Address.ADDRESS.PHONE;
    }

    @Override
    public Field<Geometry> field8() {
        return Address.ADDRESS.LOCATION;
    }

    @Override
    public Field<LocalDateTime> field9() {
        return Address.ADDRESS.LAST_UPDATE;
    }

    @Override
    public Short component1() {
        return getAddressId();
    }

    @Override
    public String component2() {
        return getAddress();
    }

    @Override
    public String component3() {
        return getAddress2();
    }

    @Override
    public String component4() {
        return getDistrict();
    }

    @Override
    public Short component5() {
        return getCityId();
    }

    @Override
    public String component6() {
        return getPostalCode();
    }

    @Override
    public String component7() {
        return getPhone();
    }

    @Override
    public Geometry component8() {
        return getLocation();
    }

    @Override
    public LocalDateTime component9() {
        return getLastUpdate();
    }

    @Override
    public Short value1() {
        return getAddressId();
    }

    @Override
    public String value2() {
        return getAddress();
    }

    @Override
    public String value3() {
        return getAddress2();
    }

    @Override
    public String value4() {
        return getDistrict();
    }

    @Override
    public Short value5() {
        return getCityId();
    }

    @Override
    public String value6() {
        return getPostalCode();
    }

    @Override
    public String value7() {
        return getPhone();
    }

    @Override
    public Geometry value8() {
        return getLocation();
    }

    @Override
    public LocalDateTime value9() {
        return getLastUpdate();
    }

    @Override
    public AddressRecord value1(Short value) {
        setAddressId(value);
        return this;
    }

    @Override
    public AddressRecord value2(String value) {
        setAddress(value);
        return this;
    }

    @Override
    public AddressRecord value3(String value) {
        setAddress2(value);
        return this;
    }

    @Override
    public AddressRecord value4(String value) {
        setDistrict(value);
        return this;
    }

    @Override
    public AddressRecord value5(Short value) {
        setCityId(value);
        return this;
    }

    @Override
    public AddressRecord value6(String value) {
        setPostalCode(value);
        return this;
    }

    @Override
    public AddressRecord value7(String value) {
        setPhone(value);
        return this;
    }

    @Override
    public AddressRecord value8(Geometry value) {
        setLocation(value);
        return this;
    }

    @Override
    public AddressRecord value9(LocalDateTime value) {
        setLastUpdate(value);
        return this;
    }

    @Override
    public AddressRecord values(Short value1, String value2, String value3, String value4, Short value5, String value6, String value7, Geometry value8, LocalDateTime value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IAddress from) {
        setAddressId(from.getAddressId());
        setAddress(from.getAddress());
        setAddress2(from.getAddress2());
        setDistrict(from.getDistrict());
        setCityId(from.getCityId());
        setPostalCode(from.getPostalCode());
        setPhone(from.getPhone());
        setLocation(from.getLocation());
        setLastUpdate(from.getLastUpdate());
    }

    @Override
    public <E extends IAddress> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AddressRecord
     */
    public AddressRecord() {
        super(Address.ADDRESS);
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    public AddressRecord(Short addressId, String address, String address2, String district, Short cityId, String postalCode, String phone, Geometry location, LocalDateTime lastUpdate) {
        super(Address.ADDRESS);

        setAddressId(addressId);
        setAddress(address);
        setAddress2(address2);
        setDistrict(district);
        setCityId(cityId);
        setPostalCode(postalCode);
        setPhone(phone);
        setLocation(location);
        setLastUpdate(lastUpdate);
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    public AddressRecord(io.github.jklingsporn.qjre.schema.tables.pojos.Address value) {
        super(Address.ADDRESS);

        if (value != null) {
            setAddressId(value.getAddressId());
            setAddress(value.getAddress());
            setAddress2(value.getAddress2());
            setDistrict(value.getDistrict());
            setCityId(value.getCityId());
            setPostalCode(value.getPostalCode());
            setPhone(value.getPhone());
            setLocation(value.getLocation());
            setLastUpdate(value.getLastUpdate());
        }
    }

        public AddressRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
