/*
 * This file is generated by jOOQ.
 */
package io.github.jklingsporn.qjre.schema.tables.daos;


import io.github.jklingsporn.qjre.schema.tables.City;
import io.github.jklingsporn.qjre.schema.tables.records.CityRecord;
import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.smallrye.mutiny.Uni;
import io.github.jklingsporn.vertx.jooq.mutiny.reactive.ReactiveMutinyQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@javax.inject.Singleton
public class CityDao extends AbstractReactiveVertxDAO<CityRecord, io.github.jklingsporn.qjre.schema.tables.pojos.City, Short, Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.City>>, Uni<io.github.jklingsporn.qjre.schema.tables.pojos.City>, Uni<Integer>, Uni<Short>> implements io.github.jklingsporn.vertx.jooq.mutiny.VertxDAO<CityRecord,io.github.jklingsporn.qjre.schema.tables.pojos.City,Short> {
        @javax.inject.Inject

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public CityDao(Configuration configuration, io.vertx.mutiny.sqlclient.SqlClient delegate) {
                super(City.CITY, io.github.jklingsporn.qjre.schema.tables.pojos.City.class, new ReactiveMutinyQueryExecutor<CityRecord,io.github.jklingsporn.qjre.schema.tables.pojos.City,Short>(configuration,delegate,io.github.jklingsporn.qjre.schema.tables.mappers.RowMappers.getCityMapper()));
        }

        @Override
        protected Short getId(io.github.jklingsporn.qjre.schema.tables.pojos.City object) {
                return object.getCityId();
        }

        /**
     * Find records that have <code>city IN (values)</code> asynchronously
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.City>> findManyByCity(Collection<String> values) {
                return findManyByCondition(City.CITY.CITY_.in(values));
        }

        /**
     * Find records that have <code>city IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.City>> findManyByCity(Collection<String> values, int limit) {
                return findManyByCondition(City.CITY.CITY_.in(values),limit);
        }

        /**
     * Find records that have <code>country_id IN (values)</code> asynchronously
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.City>> findManyByCountryId(Collection<Short> values) {
                return findManyByCondition(City.CITY.COUNTRY_ID.in(values));
        }

        /**
     * Find records that have <code>country_id IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.City>> findManyByCountryId(Collection<Short> values, int limit) {
                return findManyByCondition(City.CITY.COUNTRY_ID.in(values),limit);
        }

        /**
     * Find records that have <code>last_update IN (values)</code>
     * asynchronously
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.City>> findManyByLastUpdate(Collection<LocalDateTime> values) {
                return findManyByCondition(City.CITY.LAST_UPDATE.in(values));
        }

        /**
     * Find records that have <code>last_update IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.City>> findManyByLastUpdate(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(City.CITY.LAST_UPDATE.in(values),limit);
        }

        @Override
        public ReactiveMutinyQueryExecutor<CityRecord,io.github.jklingsporn.qjre.schema.tables.pojos.City,Short> queryExecutor(){
                return (ReactiveMutinyQueryExecutor<CityRecord,io.github.jklingsporn.qjre.schema.tables.pojos.City,Short>) super.queryExecutor();
        }

        @Override
        protected java.util.function.Function<io.vertx.sqlclient.RowSet<io.vertx.sqlclient.Row>,Long> extractMysqlLastInsertProperty(){
                return rs -> rs.property(io.vertx.mysqlclient.MySQLClient.LAST_INSERTED_ID);
        }
}
