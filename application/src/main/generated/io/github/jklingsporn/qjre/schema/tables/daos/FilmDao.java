/*
 * This file is generated by jOOQ.
 */
package io.github.jklingsporn.qjre.schema.tables.daos;


import io.github.jklingsporn.qjre.schema.enums.FilmRating;
import io.github.jklingsporn.qjre.schema.tables.Film;
import io.github.jklingsporn.qjre.schema.tables.records.FilmRecord;
import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.smallrye.mutiny.Uni;
import io.github.jklingsporn.vertx.jooq.mutiny.reactive.ReactiveMutinyQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@javax.inject.Singleton
public class FilmDao extends AbstractReactiveVertxDAO<FilmRecord, io.github.jklingsporn.qjre.schema.tables.pojos.Film, Short, Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>>, Uni<io.github.jklingsporn.qjre.schema.tables.pojos.Film>, Uni<Integer>, Uni<Short>> implements io.github.jklingsporn.vertx.jooq.mutiny.VertxDAO<FilmRecord,io.github.jklingsporn.qjre.schema.tables.pojos.Film,Short> {
        @javax.inject.Inject

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public FilmDao(Configuration configuration, io.vertx.mutiny.sqlclient.SqlClient delegate) {
                super(Film.FILM, io.github.jklingsporn.qjre.schema.tables.pojos.Film.class, new ReactiveMutinyQueryExecutor<FilmRecord,io.github.jklingsporn.qjre.schema.tables.pojos.Film,Short>(configuration,delegate,io.github.jklingsporn.qjre.schema.tables.mappers.RowMappers.getFilmMapper()));
        }

        @Override
        protected Short getId(io.github.jklingsporn.qjre.schema.tables.pojos.Film object) {
                return object.getFilmId();
        }

        /**
     * Find records that have <code>title IN (values)</code> asynchronously
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByTitle(Collection<String> values) {
                return findManyByCondition(Film.FILM.TITLE.in(values));
        }

        /**
     * Find records that have <code>title IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByTitle(Collection<String> values, int limit) {
                return findManyByCondition(Film.FILM.TITLE.in(values),limit);
        }

        /**
     * Find records that have <code>description IN (values)</code>
     * asynchronously
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByDescription(Collection<String> values) {
                return findManyByCondition(Film.FILM.DESCRIPTION.in(values));
        }

        /**
     * Find records that have <code>description IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByDescription(Collection<String> values, int limit) {
                return findManyByCondition(Film.FILM.DESCRIPTION.in(values),limit);
        }

        /**
     * Find records that have <code>release_year IN (values)</code>
     * asynchronously
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByReleaseYear(Collection<Short> values) {
                return findManyByCondition(Film.FILM.RELEASE_YEAR.in(values));
        }

        /**
     * Find records that have <code>release_year IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByReleaseYear(Collection<Short> values, int limit) {
                return findManyByCondition(Film.FILM.RELEASE_YEAR.in(values),limit);
        }

        /**
     * Find records that have <code>language_id IN (values)</code>
     * asynchronously
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByLanguageId(Collection<Boolean> values) {
                return findManyByCondition(Film.FILM.LANGUAGE_ID.in(values));
        }

        /**
     * Find records that have <code>language_id IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByLanguageId(Collection<Boolean> values, int limit) {
                return findManyByCondition(Film.FILM.LANGUAGE_ID.in(values),limit);
        }

        /**
     * Find records that have <code>original_language_id IN (values)</code>
     * asynchronously
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByOriginalLanguageId(Collection<Boolean> values) {
                return findManyByCondition(Film.FILM.ORIGINAL_LANGUAGE_ID.in(values));
        }

        /**
     * Find records that have <code>original_language_id IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByOriginalLanguageId(Collection<Boolean> values, int limit) {
                return findManyByCondition(Film.FILM.ORIGINAL_LANGUAGE_ID.in(values),limit);
        }

        /**
     * Find records that have <code>rental_duration IN (values)</code>
     * asynchronously
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByRentalDuration(Collection<Boolean> values) {
                return findManyByCondition(Film.FILM.RENTAL_DURATION.in(values));
        }

        /**
     * Find records that have <code>rental_duration IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByRentalDuration(Collection<Boolean> values, int limit) {
                return findManyByCondition(Film.FILM.RENTAL_DURATION.in(values),limit);
        }

        /**
     * Find records that have <code>rental_rate IN (values)</code>
     * asynchronously
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByRentalRate(Collection<BigDecimal> values) {
                return findManyByCondition(Film.FILM.RENTAL_RATE.in(values));
        }

        /**
     * Find records that have <code>rental_rate IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByRentalRate(Collection<BigDecimal> values, int limit) {
                return findManyByCondition(Film.FILM.RENTAL_RATE.in(values),limit);
        }

        /**
     * Find records that have <code>length IN (values)</code> asynchronously
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByLength(Collection<Short> values) {
                return findManyByCondition(Film.FILM.LENGTH.in(values));
        }

        /**
     * Find records that have <code>length IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByLength(Collection<Short> values, int limit) {
                return findManyByCondition(Film.FILM.LENGTH.in(values),limit);
        }

        /**
     * Find records that have <code>replacement_cost IN (values)</code>
     * asynchronously
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByReplacementCost(Collection<BigDecimal> values) {
                return findManyByCondition(Film.FILM.REPLACEMENT_COST.in(values));
        }

        /**
     * Find records that have <code>replacement_cost IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByReplacementCost(Collection<BigDecimal> values, int limit) {
                return findManyByCondition(Film.FILM.REPLACEMENT_COST.in(values),limit);
        }

        /**
     * Find records that have <code>rating IN (values)</code> asynchronously
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByRating(Collection<FilmRating> values) {
                return findManyByCondition(Film.FILM.RATING.in(values));
        }

        /**
     * Find records that have <code>rating IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByRating(Collection<FilmRating> values, int limit) {
                return findManyByCondition(Film.FILM.RATING.in(values),limit);
        }

        /**
     * Find records that have <code>special_features IN (values)</code>
     * asynchronously
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyBySpecialFeatures(Collection<String> values) {
                return findManyByCondition(Film.FILM.SPECIAL_FEATURES.in(values));
        }

        /**
     * Find records that have <code>special_features IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyBySpecialFeatures(Collection<String> values, int limit) {
                return findManyByCondition(Film.FILM.SPECIAL_FEATURES.in(values),limit);
        }

        /**
     * Find records that have <code>last_update IN (values)</code>
     * asynchronously
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByLastUpdate(Collection<LocalDateTime> values) {
                return findManyByCondition(Film.FILM.LAST_UPDATE.in(values));
        }

        /**
     * Find records that have <code>last_update IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Uni<List<io.github.jklingsporn.qjre.schema.tables.pojos.Film>> findManyByLastUpdate(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(Film.FILM.LAST_UPDATE.in(values),limit);
        }

        @Override
        public ReactiveMutinyQueryExecutor<FilmRecord,io.github.jklingsporn.qjre.schema.tables.pojos.Film,Short> queryExecutor(){
                return (ReactiveMutinyQueryExecutor<FilmRecord,io.github.jklingsporn.qjre.schema.tables.pojos.Film,Short>) super.queryExecutor();
        }

        @Override
        protected java.util.function.Function<io.vertx.sqlclient.RowSet<io.vertx.sqlclient.Row>,Long> extractMysqlLastInsertProperty(){
                return rs -> rs.property(io.vertx.mysqlclient.MySQLClient.LAST_INSERTED_ID);
        }
}
